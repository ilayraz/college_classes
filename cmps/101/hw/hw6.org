* 13.1-2
  36 would be inserted as the right child of 35. (Please don't make me draw trees in \LaTeX). \\
  This would not work if 36 was red since 35 is also red which means that there would be two red nodes in a row. \\
  This would also not work if 35 was black since then that path would have one more black node than every
  other path which would break one of the properties of red black trees.
* 13.1-5
  For any given red-black tree, the shortest possible path is a path that contains
  only black nodes. Let this shortest path containing only black nodes be of length $a$. \\
  Since red-black trees must maintain the property that all paths must have the same number of
  black nodes, the only way to increase the length of a path is by adding red nodes, however
  since red-black trees can not have two red nodes in a row, the red nodes must be interspersed
  between the black nodes equally. This means that for every black node, there can be at most one
  red node. From this it clearly follows that the maximal height of a red black tree $b$ maintains
  a relationship to the shortest path such that $b=2a$.
* 13.1-6
  The smallest possible number of nodes occures when all nodes are black, so
  the $bh$ is equal to the height of a normal binary tree, meaning that
  for a given black height $k$, the tree would have a minimal number of nodes equal to
  $2^{k+1}-1$. \\
  The maximal number of nodes for a given black height occures when there is
  a red node interspersed between every black node. This would give twice
  a height twice as much as the height of the smallest tree while maintaing
  the same black height. This means that the maximal number of elements
  in the tree would be $2^{2k+1}-1$
* 13.2-1
  #+BEGIN_EXAMPLE
    RIGHT-ROTATE(T, y)
        x = y.left
        y.left = x.right
        if x.right != T.nil
           x.right.p = y
        x.p = y.p
        if y.p == T.nil
           T.root = x
        elseif y == y.p.right
               y.p.right = y
        else y.p.left = y
        x.right = y
        y.p = x
  #+END_EXAMPLE
* 13.2-4
  For a given binary tree with $n$ nodes, the maximal amount of rotations it will take
  to turn it into a right-going chain will involve performing one right rotation
  on every left child, which gives at most $n-1$ rotations. \\
  This means that every binary tree can be turned into a right-going chain in at most $n-1$ rotations
  and conversely, every right-going chain can be turned back to its original shape by doing the inverse
  of the original moves on that tree. \\
  This means that the amount of moves it will take to turn an $n$-node binary tree
  into a right-going tree and then back into any other kind of tree is at most $2(n-1)$ rotations,
  which is clearly $O(n)$.
* 13.3-1
  If the node was made to be black instead of red than property 5 would be violated
  Since that path will have one more black node than every other path.
* 22.1-1
  To compute the out-degree of each vector would just mean to iterate over
  each vector and check its length in the adjecency-list representation, so
  $O(V)$ assuming the length of the list does not need to be computed on the spot. \\
  To compute the in-dgree of each vector, every list would have to be iterated over
  and counted for how many times each vector appears in it, so $O(E+V)$.
* 22.1-3
  For the matrix representation, the graph could be transposed by just taking
  the transpose of the matrix, which is $O(V^2)$. \\
  For the adjecency-list representation, start with an empty list, and for each
  list, iterate through it and add each vector found to the new list. This means
  iterating through each list in the lists which has a runtime of $O(E+V)$.
* 22.2-3
  Since the algorithm never tests if the edge is black or grey (only tests if it's white),
  it makes no difference how many states other than white exists. Therefore only
  two states need to exist (which can be represented with 1 bit): white, and not-white.
* 22.2-4
  If a matrix is used than for every dequeued vector, every vertice has to be examined
  for adjecency, which requires $O(V)$ time. So if each vector require an $O(V)$ operation
  done on it, this clearly requires $O(V^2)$ time.
