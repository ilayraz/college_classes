#+LATEX_HEADER: \usepackage{fancyvrb}
#+OPTIONS: toc:1

* 1.2-2
#+BEGIN_LaTeX
  \begin{align*}
    8n^2 &\leq 64n\lg n \\
    8n &\leq 64\lg n \\
    n &\leq 8\lg n \\
    n &\leq 43
  \end{align*}
#+END_LaTeX
* 1.2-3
  #+BEGIN_LaTeX
    \begin{align*}
      100n^2 &= 2^n \\
      \lg100n^2 &= n \\
      \lg 100 + 2\lg n &= n \\
      2\lg n - n &= -\lg 100 \\
      n &= 15
    \end{align*}
  #+END_LaTeX
* 1-1
  |            | 1 second   | 1 minute             | 1 hour                 | 1 day                            | 1 month                                    | 1 year                                      | 1 century                                   |
  |------------+------------+----------------------+------------------------+----------------------------------+--------------------------------------------+---------------------------------------------+---------------------------------------------|
  | $\lg n$    | $2^{10^6}$ | $2^{60 \times 10^6}$ | $2^{60^2 \times 10^6}$ | $2^{24 \times 60^2 \times 10^6}$ | $2^{30 \times 24 \times 60^2 \times 10^6}$ | $2^{365 \times 24 \times 60^2 \times 10^6}$ | $2^{365 \times 24 \times 60^2 \times 10^8}$ |
  | $\sqrt{n}$ | $10^12$    | $3.6 \times 10^15$   | $1.29 \times 10^{21}$  | $(24 \times 60^2 \times 10^6)^2$ | $(30 \times 24 \times 60^2 \times 10^6)^2$ | $(365 \times 24 \times 60^2 \times 10^6)^2$ | $(365 \times 24 \times 60^2 \times 10^8)^2$ |
  | $n$        | $10^6$     | $60 \times 10^6$     | $60^2 \times 10^6$     | $24 \times 60^2 \times 10^6$     | $30 \times 24 \times 60^2 \times 10^6$     | $365 \times 24 \times 60^2 \times 10^6$     | $365 \times 24 \times 60^2 \times10^8$      |
  | $n\lg n$   | 62746      | 2801417              | 133378058              | 2755147513                       | 71870856404                                | 797633893349                                | 6.8610956750570396706Ã—10^13                 |
  | $n^2$      | 1000       | 7746                 | 60000                  | 293939                           | 1609969                                    | 5615692                                     | 56156923                                    |
  | $n^3$      | 100        | 391                  | 1532                   | 4420                             | 13737                                      | 31594                                       | 146649                                      |
  | $2^n$      | 19         | 25                   | 31                     | 36                               | 41                                         | 44                                          | 51                                          |
  | $n!$       | 9          | 11                   | 12                     | 13                               | 15                                         | 16                                          | 17                                          |
  |            |            |                      |                        |                                  |                                            |                                             |                                             |
  |------------+------------+----------------------+------------------------+----------------------------------+--------------------------------------------+---------------------------------------------+---------------------------------------------|
* 2.1-1
| 31 | (41) |   59 |   26 |   41 |   58 |
| 31 |   41 | (59) |   26 |   41 |   58 |
| 31 |   41 |   59 | (26) |   41 |   58 |
| 26 |   31 |   41 |   59 | (41) |   58 |
| 26 |   31 |   41 |   41 |   59 | (58) |
| 26 |   31 |   41 |   41 |   58 |   59 |
* 2.1-3
#+BEGIN_EXAMPLE
  LINEAR_SEARCH(A, v)
                   for i = 1 to A.length do
                       if A[i] == v then
                          return i
                       end if
                   end for
                   return NIL
#+END_EXAMPLE
Loop invariant: for a given index i there is no index k < i such that A[k] = v. \\
Initialization: when i = 1 there is no index k < i. \\
Maintence: when an iteration of the loop starts, there is no k < i such that A[k] = v, because of there was one, the loop would have terminated before reaching that start of the next iteration. \\
Termination: there are two conditions for termination. Either the loop terminates when a k is found such that A[k] = v, in which case a value was found, or after the loop when finishes and there is no index that satisfies the condition, in which case NIL is returned.
* 2.2-1
$\Theta (n^3)$
* 2.2-2
#+BEGIN_EXAMPLE
  SELECTION-SORT(A)
      for i = 1 to A.length - 1 do
          mkey = 1
          for j = i + 1 to A.length do
              if A[j] < A[mkey] then
                 mkey = j
              end if
          end for
          temp = A[i]
          A[i] = A[mkey]
          A[mkey] = A[i]
       end for
#+END_EXAMPLE
Loop invariant: after each iteration, the sub-array A[1...i-1] has the smallest i - 1 elements of A in increasing order. \\
The loop needs to only run n - 1 times because at that point, the sub-array A[1...n-1] contains the n smallest elements in the array, therefore since there is only 1 element left, the element at position n, it must be the next smallest element in the array, therefore the array is already in sorted order.
The best case and worst case of the insertion sort are $\Theta (n^2)$ because the function always check for the least element regardless of element order.
* 2.2-3
In the best case, the target element is in the first index of the array, in which case the loop will only execute once regardless of size n, therefore $\Theta(n)$ \\
At the worst case, the target element will be that the nth index of the array, in which case the loop will execute n times, therefore $\Theta(n)$ \\
The average case is the mean of the best case and the worst case, therefore $\frac{n+1}{2}$ elements. The average case will therefore have a runtime of $\Theta(n)$
* 2.3-1
(3,9,26,38,41,49,52,57) \\
(3,26,41,52) (9,38,49,57) \\
(3,41) (26,52) (38,57) (9, 49) \\
(3) (41) (52) (26) (38) (57) (9) (49)
* 2.3-3
#+BEGIN_LaTeX
  \begin{proof}
    Since $n$ is a power of 2, let $n = 2^k, k > 1$. \\
    Base case ($k=1$): $T(2) = 2\lg 2 = 2$. \\
    Inductive case:
    \begin{align*}
      T(2^{k+1}) &= 2T(\frac{2^{k+1}}{2}) + 2^{k+1} \\
      &= 2T(2^k) + 2^{k+1} \\
      &= 2^{k+1}\lg 2^k + 2^{k+1} \\
      &= 2^{k+1}(k + 1) \\
      &= 2^{k+1}\lg 2^{k+1} \\
      &= n\lg n &&\qedhere
    \end{align*}
  \end{proof}
#+END_LaTeX
* 2.3-5
#+BEGIN_LaTeX
  \begin{Verbatim}[commandchars=\\\{\}]
  BINARY-SEARCH(A, v, start, end)
      n = \(\floor{\frac{\text{end-start}}{2}}\)
      if start > end then
          return nil
      elseif A[n] == v then
          return n
      elseif A[n] > v then
          return BINARY-SEARCH(A, v, start, n)
      else
          return BINARY-SEARCH(A, v, n+1, end)
      end if
  \end{Verbatim}
#+END_LaTeX
  Each call to binary search results in a constant amount of operations plus another call to binary sort where the size of (end-start) is half of the original size.
  This can be described by the recurrence relation: \\
  #+BEGIN_LaTeX
    \[
    T(n)=\begin{cases}
    \Theta(1) &n=1 \\
    T(\frac{n}{2})+\Theta(1) &n>1
    \end{cases}
    \]
  #+END_LaTeX
  Consider the case where $n$ is a power of two, therefore $n=2^k$ for some $k\in\N$. The recurrence will clearly terminate after n cases, and so $T$ can be rewritten as:
  #+BEGIN_LaTeX
    \begin{align*}
      T(n) &= T(\frac{n}{2^k}) + k \Theta(1) \\
      &= T(\frac{2^k}{2^k}) + k \Theta(1) &&\text{subsitute $2^k$ for n} \\
      &= T(1) + k\Theta(1) \\
      &= \Theta(1) + k\Theta(1) \\
      &= \Theta(1) + \Theta(1)\lg n &&\text{substitute $k = \lg n$}
    \end{align*}
  #+END_LaTeX
  Which shows that $T(n) = \Theta(\lg n)$
* 2.3-6
  Insertion sort wouldn't improve the runtime of insertion sort, because it would only tell you how many elements you need to copy over.
  You would still need to iterate over elements in the subarray to copy them over so it wouldn't improve the runtime.
* Problem 2-1
** \\
   For a given list of length $k$, insertion sort has a runtime of $\Theta(k^2)$, for a $n/k$ lists, it would have a runtime of $\Theta(\frac{n}{k}k^2) = \Theta(nk)$
** \\
   The amount of merges needed is equal to the depth of the tree, which is like a normal merge sort, but stops when the length of the subarrays is less than $k$,
   which means that the amount of merges needed is $\lg n - \lg k = \lg\frac{n}{k}$ combined with $n\Theta(1)$ cost of combining the trees, this gives a worst-case merging runtime of $\Theta(n\lg\frac{n}{k})$
** \\
   $\Theta(nk + n\lg\frac{n}{k}) = \Theta(nk + n\lg n - \lg k)$. Therefore for the function to have the same runtime as merge sort, $k(n) \in \Theta(\lg n)$, which means that $k$ must be at most equal to $\lg n$
** \\
   $c_1n^2 = c_2\lg k\implies k = \frac{c_2}{c_1}\lg k$
