#+OPTIONS: toc:nil

* 22.3-2
  | Vertex | Discovery | Finish |
  |--------+-----------+--------|
  | q      |         1 |        |
  | r      |        17 |     20 |
  | s      |         2 |      7 |
  | t      |         8 |     15 |
  | u      |        18 |     19 |
  | v      |         3 |      6 |
  | w      |         4 |      5 |
  | x      |         9 |     12 |
  | y      |        13 |     14 |
  | z      |        10 | 11     |
* 22.3-8
  Consider a graph with 3 vertices $x,u,w$ with edges $(x,u),(u,x),(x,v)$ \\
  If DFS explores $x$ and then $u$. Since the only vertex avaliable from $u$ is $x$, and $x$ is already grey, $u$ is now finished and blacked out. \\
  Therefore, since by the time $v$ is explored, $u$ is already finished, $v$ must not be a decendent of $u$.
* 22.4-1
  $m,q,t,r,u,y,v,w,z,x,n,o,s,p$
* 23.1-1
  Consider the set of edges that has any cut with $(u,v)$ crossing it.
  Since $(u,v)$ has a minimal weight, it is a leight edge, therefore it is safe to add.
  Since it was added, then it must also be part of the minimum spanning tree.
* 23.1-3
  Given an MST $T$, remove edge $(u,v)$ from $T$, then draw a cut across $(u,v)$.
  Suppose that this did not include $(u,v)$, this would mean that there exists a MST with a lower
  weight than $T$, which is a contradiction, therefore, $(u,v)$ must be a light edge for this cut in the graph.
* 23.2-1
  If the edges are sorted by weight, resolve ties by choosing the edge that is in the minimum spanning tree first.
  This will still result in a tree with the same weight, however since edges in $T$ are prioritized, they will be picked over
  other edges whenever possible.
